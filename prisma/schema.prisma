datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Topic         Topic[]
  Comment       Comment[]
  comment_count Int?      @default(0)
  topic_count   Int?      @default(0)
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  Topics      Topic[]
}

model Topic {
  id            Int       @id @default(autoincrement())
  title         String
  slug          String    @unique
  user_id       String
  user          User      @relation(references: [id], fields: [user_id], onDelete: Cascade)
  private       Boolean   @default(false)
  tags          String
  content       String
  excerp        String
  created       BigInt
  Comment       Comment[]
  comment_count Int
  Category      Category? @relation(fields: [category_id], references: [id])
  category_id   Int?
}

model Comment {
  id       Int    @id @default(autoincrement())
  created  BigInt
  parent   Int
  user_id  String
  user     User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  topic_id Int
  topic    Topic? @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  content  String
}

model Tag {
  id          Int    @id @default(autoincrement())
  name        String
  slug        String
  description String
  count       Int
}
